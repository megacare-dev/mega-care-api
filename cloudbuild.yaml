steps:
  # 0. Pull the latest image to use as a cache for faster builds.
  # Ignore errors if the image doesn't exist yet (e.g., first build).
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args: ["-c", "docker pull ${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest || exit 0"]

  # 1. Build the container image.
  # The Dockerfile is now configured to run unit tests during this build step.
  # If tests fail, the build will stop here.
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}"
      # Use the latest image as a cache source to speed up builds
      - "--cache-from"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest"
      - "."

  # 2. Push the container image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}"

  # 3. Tag the new image as 'latest' for caching in future builds
  - name: "gcr.io/cloud-builders/gcloud"
    args:
      - "artifacts"
      - "docker"
      - "tags"
      - "add"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest"

  # 4. Deploy container image to Cloud Run with security best practices
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image"
      - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}"
      - "--region"
      - "${_LOCATION}"
      - "--platform"
      - "managed"
      # Best Practice: Secure the service. Access should be via API Gateway.
      - "--no-allow-unauthenticated"
      # Link secrets from Secret Manager to environment variables.
      # Assumes a secret named 'LINE_CHANNEL_ID' exists in Secret Manager.
      - "--update-secrets=LINE_CHANNEL_ID=LINE_CHANNEL_ID:latest"
      - "--project"
      - "${PROJECT_ID}"
      - "--timeout=600s" # Increase timeout to 10 minutes (default is 5 minutes)
      # Best Practice: Specify a dedicated service account for the Cloud Run service
      # - "--service-account=your-cloud-run-service-account@${PROJECT_ID}.iam.gserviceaccount.com"

images:
  - "${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}"

substitutions:
  _SERVICE_NAME: "mega-care-api"
  _REPO_NAME: "mega-care-connect-repo" # The name of your Artifact Registry repo
  _LOCATION: "asia-southeast1" # The region for your services

options:
  logging: CLOUD_LOGGING_ONLY